# Expression Documentation

## Purpose
Convert expressions into valid literals or addresses 
___
Functions
========= 
### ***expParse:*** Top level string expression parser.
```fsharp
let expParse tab exp=        
        exp 
        |> expSplit 
        |> Result.bind (checkValExp tab) 
        |> Result.bind evalExp 
        |> Result.bind checkLiteral
```
#### Inputs:
* exp: String containing an expression operand

    > e.g. ```"-8-0b11+94+THING3+&3*LABEL*Lab2test" ``` 
* tab: Optional symbol table
#### Output: 
* Valid uint32 rotating literal, potentially other valid value (DCD), valid address or string error
* Type: ```Result<uint32,string>``` 
    
#### Top-level Problems: 
1. DCD commands can contain expressions which are not valid literals?
2. Non-alphanumeric characters are simply ignored in initial Regex and do not cause errors
3. Whitespace at beginning of string (from DCD command) and possible between elements is not dealt with correctly

#### Top-level Improvements:
1. Errors passed as string could be more useful/ compatible 
2. No current limit on length of expression parsed. This could be limited in line data before parsed here or built in 
---
### ***expSplit:*** Splits string by operators (+-*), labels (alphanumeric) and values
```fsharp
    let expSplit exp =  
        match exp with
        | Matches @"\w+|[+*-]|\D\w+" lst -> Ok lst
        | _ -> Error (sprintf "Not a valid expression")        
```
#### Inputs:
* exp: String containing an expression operand
#### Output: 
* List of strings each containing an element of an expression
    > e.g. ```"-", "8", "-", "0b11", "+", "THING3"```
* Type: ```Result<string list, string>```
#### Problems: 
1. Ignoring of non-alphanumeric characters caused here
2. Potential whitespace issues caused here?

#### Improvements:
1. Tighter Regex conditions
---
### ***checkValExp:*** Checks string list contains only operators, values or defined symbols and evaluates them 
```fsharp
    let checkValExp sym lst = 
        let operMatch x = match x with 
                            | "*" | "-" | "+" -> Ok( Oper x)
                            | Matches @"[ ]" i-> Error (sprintf "ERROR: Whitespace in expression") //Needs refining
                            //Currently, whitespace at beginnings of operands or between oprands e.g. DCD 50, 30  Throws an Error when it shouldn't
                            | Matches @"^[0][b|x][0-9]+$" i-> Ok (Item (uint32 i.[0])) //0bXXXXX or 0xXXXX
                            | Matches @"^[&][0-9]+$" i-> Ok (Item (uint32 (strReplAll i.[0] '&' "0x"))) //&XXXXX
                            | _ -> match System.UInt32.TryParse x with 
                                    | (true, i) -> Ok (Item i)
                                    | (false, _) -> match sym with
                                                    | Some i -> (mapSearchRes i x) |> Result.map Item 
                                                    | None -> Error (sprintf "ERROR: Symbol %A cannot be evaluated as no symbol table exists" x)

        lst |> List.map operMatch |> resListHandle 
```
#### Inputs:
* exp: String list of expression elements
#### Output: 
* ExprType list containing operators, values and addresses or an error
* Type: ```Result<ExprType list,string>```
#### Problems: 
1. Potential whitespace problems here
---
### ***evalExp:*** Left-Associative computation of the result of a list containing operators (+-*) and values. 
```fsharp
let evalExp exp = 
    let updateRunVal (curVal,state,newItem)  = match state with //Only called when state = one of these operators, so incomp. matching fine
                                                | "*" -> uint32 (curVal * newItem)
                                                | "-" -> uint32 (curVal - newItem)
                                                | "+" -> uint32 (curVal + newItem)
                                                | _ -> failwith "Should never fail, as comparing against a set of patterns used to call this function"                           

    let rec eval (runVal,st)  (lst: ExprType list) =
        match lst with
        | [] -> match st with 
                | "" -> Error (sprintf "ERROR: Empty expression cannot be evaluated")
                | "*" | "-" | "+" -> Error (sprintf "ERROR: Expression ends with invalid operator %A" st)
                | "f" -> Ok (Option.get runVal)
                | _ -> Error (sprintf "ERROR: Uncaught pattern %A at end of expression" st) //Should never run
        | x :: xs -> match (runVal,st, x) with
                        | (Some i, "f", Oper j) when List.exists (fun itm -> j= itm) ["*";"+";"-"] -> eval (Some i, j) xs
                        | (Some _, ("*" | "-" | "+"), Oper j) when List.exists (fun itm -> j= itm) ["*";"+";"-"] -> Error (sprintf "ERROR: Expression contains consecutive operators %A and %A" st x)                        
                        | (Some i, ("*" | "-" | "+"), Item j) ->  eval ( Some (updateRunVal (i,st, j)),  "f") xs
                        | (None, "", Oper j) when List.exists (fun itm -> j= itm) ["*";"+"] -> Error (sprintf "ERROR: Expression begins with invalid operator %A" j) //Expression can begin with negative
                        | (None, "", (Oper "-")) -> eval (Some (uint32 -1),"*") xs //Dealing with first item of expression allowed to be negative
                        | (None, "", Item j) -> eval (Some (j),"f") xs                            
                        | _ -> Error (sprintf "ERROR: Uncaught pattern in evalExp for %A" (runVal,st,x))
                                    
    exp |> eval (None,"")    
```
#### Inputs:
* exp: ExprType list, containing expression elements
#### Output: 
* Valid uint32 rotating literal, potentially other valid value (DCD?), valid address or string error
#### Improvements:
1. More thorough testing should be done
